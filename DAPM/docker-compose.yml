version: '3.4'

services:
  keycloak:
    image:  quay.io/keycloak/keycloak:latest
    container_name: keycloak
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - DB_VENDOR=postgres
      - DB_ADDR=keycloak-postgres
      - DB_DATABASE=keycloakdb
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - KEYCLOAK_IMPORT=/opt/keycloak/data/import/realm.json
      - KC_HTTPS_CERTIFICATE_FILE=/opt/keycloak/certs/cert.pem
      - KC_HTTPS_CERTIFICATE_KEY_FILE=/opt/keycloak/certs/key.pem
      - KC_HOSTNAME_STRICT=false
      - KC_HOSTNAME_URL=https://localhost:8443
    ports:
      - "8888:8443"
    command: ["start-dev", "--https-port=8443", "--import-realm"]
    volumes:
      - ./Keycloak/Realms:/opt/keycloak/data/import
      - ./certs:/opt/keycloak/certs  # Mount the certificates
    depends_on:
      - keycloak-postgres
    networks:
      - DAPM
      
  keycloak-postgres:
    image: postgres:latest
    restart: always
    user: postgres
    environment:
      POSTGRES_DB: keycloakdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - keycloak-db:/var/lib/postgresql/data
    ports:
      - "5435:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - DAPM
  
  dapm.clientapi:
    image: ${DOCKER_REGISTRY-}dapmclientapi
    build:
      context: .
      dockerfile: DAPM.ClientApi/Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
    ports:
      - "5000:8080" 
    networks:
      - DAPM  
    extra_hosts:
      - "host.docker.internal:host-gateway" 
      - "localhost:host-gateway"

  dapm.accessControlService:
    image: ${DOCKER_REGISTRY-}dapmaccesscontrolservice
    build:
      context: .
      dockerfile: DAPM.AccessControlService/Dockerfile
    depends_on:
      - sqlserver
    ports:
      - "5002:8080"
    networks:
      - DAPM
    extra_hosts:
      - "host.docker.internal:host-gateway"
      - "localhost:host-gateway"

  sqlserver:
    image: mcr.microsoft.com/mssql/server
    container_name: sql_server_container
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=Password123
    ports:
      - "1433:1433"
    networks:
      - DAPM

  dapm.peerapi:
    image: ${DOCKER_REGISTRY-}dapmpeerapi
    build:
      context: .
      dockerfile: DAPM.PeerApi/Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
    ports:
        - "5001:8080"
    networks:
    - DAPM

  dapm.repositoryms.api:
    image: ${DOCKER_REGISTRY-}dapmrepositorymsapi
    build:
      context: .
      dockerfile: DAPM.RepositoryMS.Api/Dockerfile
    depends_on:
      mongo:
          condition: service_healthy
      rabbitmq:
          condition: service_healthy
      postgres-repository:
          condition: service_healthy
    ports:
      - "6000:8080"
    networks:
    - DAPM

  dapm.resourceregistryms.api:
    image: ${DOCKER_REGISTRY-}dapmresourceregistrymsapi
    build:
      context: .
      dockerfile: DAPM.ResourceRegistryMS.Api/Dockerfile
    depends_on:
      postgres:
          condition: service_healthy
      rabbitmq:
          condition: service_healthy
    ports:
      - "7000:8080"
    networks:
    - DAPM


  dapm.pipelineorchestratorms.api:
    image: ${DOCKER_REGISTRY-}dapmpipelineorchestratormsapi
    build:
      context: .
      dockerfile: DAPM.PipelineOrchestratorMS.Api/Dockerfile
    depends_on:
      rabbitmq:
          condition: service_healthy
    ports:
      - "8000:8080"
    networks:
    - DAPM


  dapm.orchestrator:
    image: ${DOCKER_REGISTRY-}dapmorchestrator
    build:
      context: .
      dockerfile: DAPM.Orchestrator/Dockerfile
    depends_on:
      rabbitmq:
          condition: service_healthy
    ports:
      - "9000:8080"
    networks:
    - DAPM

  dapm.operatorMS.api:
    image: ${DOCKER_REGISTRY-}dapmoperatormsapi
    build:
       context: .
       dockerfile: DAPM.OperatorMS.Api/Dockerfile
    ports:
       - "5100:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - operator-data:/app/shared 
    user: root
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
    - DAPM

  rabbitmq: # login guest:guest
    image: rabbitmq:3-management
    hostname: "rabbitmq"
    labels:
      NAME: "rabbitmq"
    ports:
    - "5672:5672"
    - "8083:15672"
    healthcheck:
      test: rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms
      interval: 10s
      timeout: 30s
      retries: 5
    networks:
    - DAPM

  mongo:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    ports:
      - "27018:27017"
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 20s
    networks:
    - DAPM

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8089:8089
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/
      ME_CONFIG_BASICAUTH: 0
    networks:
    - DAPM

  postgres:
    image: postgres
    restart: always
    # set shared memory limit when using docker-compose
    shm_size: 128mb
    # or set shared memory limit when deploy via swarm stack
    #volumes:
    #  - type: tmpfs
    #    target: /dev/shm
    #    tmpfs:
    #      size: 134217728 # 128*2^20 bytes = 128Mb
    user: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: DAPM_ResourceRegistry
    volumes:
      - type: tmpfs
        target: /dev/shm
        tmpfs:
          size: 134217728 # 128*2^20 bytes = 128Mb
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
    - DAPM

  postgres-repository:
    image: postgres
    restart: always
    # set shared memory limit when using docker-compose
    shm_size: 128mb
    # or set shared memory limit when deploy via swarm stack
    #volumes:
    #  - type: tmpfs
    #    target: /dev/shm
    #    tmpfs:
    #      size: 134217728 # 128*2^20 bytes = 128Mb
    user: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: DAPM_Repository
    volumes:
      - type: tmpfs
        target: /dev/shm
        tmpfs:
          size: 134217728 # 128*2^20 bytes = 128Mb
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
    - DAPM

  adminer:
    image: adminer
    restart: always
    ports:
      - 8082:8082
    networks:
    - DAPM

networks:
  DAPM:
    name: DAPM
    driver: bridge

volumes:
  operator-data:
    name: operator-data
  keycloak-db:
    name: keycloak-db
